generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ProcessType {
  CIVIL
  PENAL
  LABORAL
  ADMINISTRATIVO
  OTRO
}

enum CaseStatus {
  ACTIVO
  APELACION
  ARCHIVADO
  FINALIZADO
}

enum BillingMode {
  HOURLY
  FIXED
  CONTINGENCY
}

model Organization {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  timezone  String?  @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users   User[]
  clients Client[]
  cases   Case[]
  paymentMethods PaymentMethod[] @relation("OrganizationPaymentMethods")

  // Billing
  trialEndsAt            DateTime?
  defaultPaymentMethodId String?   @unique @db.Uuid
  defaultPaymentMethod   PaymentMethod? @relation("OrganizationDefaultPaymentMethod", fields: [defaultPaymentMethodId], references: [id])
  subscription          Subscription? @relation("OrganizationSubscription")
}

model User {
  id              String   @id @default(uuid()) @db.Uuid
  organizationId  String   @db.Uuid
  email           String
  name            String
  hashedPassword  String?
  role            String? // admin, abogado, asistente
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedCases Case[]     @relation("ResponsibleCases")
  deadlinesCompleted Deadline[] @relation("DeadlineCompletedBy")
  caseAssignments    CaseAssignment[]
  notes              CaseNote[]
  tasksAssigned      CaseTask[]
  timeEntries        TimeEntry[]
  expenses           Expense[]
  clientsResponsible Client[]

  @@unique([organizationId, email])
}

enum SubscriptionStatus {
  INCOMPLETE
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
}

enum PaymentMethodStatus {
  ACTIVE
  INACTIVE
}

model PaymentMethod {
  id                  String   @id @default(uuid()) @db.Uuid
  organizationId      String   @db.Uuid
  provider            String   // 'wompi'
  type                String   // 'CARD'
  wompiPaymentSourceId String  @unique
  wompiCardToken      String?
  brand               String?
  last4               String?
  expMonth            Int?
  expYear             Int?
  status              PaymentMethodStatus @default(ACTIVE)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  organization Organization @relation("OrganizationPaymentMethods", fields: [organizationId], references: [id], onDelete: Cascade)
  defaultForOrganization Organization? @relation("OrganizationDefaultPaymentMethod")
  subscriptionsAsDefault Subscription[] @relation("SubscriptionDefaultPaymentMethod")
}

model Subscription {
  id                 String   @id @default(uuid()) @db.Uuid
  organizationId     String   @unique @db.Uuid
  planCode           String   @default("PRO")
  status             SubscriptionStatus @default(TRIALING)
  trialEndsAt        DateTime?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean @default(false)
  defaultPaymentMethodId String? @db.Uuid
  lastChargeAt       DateTime?
  lastChargeStatus   String?
  lastChargeError    String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  organization Organization @relation("OrganizationSubscription", fields: [organizationId], references: [id], onDelete: Cascade)
  defaultPaymentMethod PaymentMethod? @relation("SubscriptionDefaultPaymentMethod", fields: [defaultPaymentMethodId], references: [id])
}

model Client {
  id              String   @id @default(uuid()) @db.Uuid
  organizationId  String   @db.Uuid
  name            String
  type            String   // persona/empresa
  identification  String?
  email           String?
  phones          String[]
  addressLine     String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  contact         Json?
  status          String?  // ACTIVO/INACTIVO
  responsibleLawyerId String? @db.Uuid
  tags            String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  responsibleLawyer User?   @relation(fields: [responsibleLawyerId], references: [id], onDelete: SetNull)
  cases        Case[]
  contacts     ClientContact[]

  @@unique([organizationId, identification])
}

model ClientContact {
  id        String   @id @default(uuid()) @db.Uuid
  clientId  String   @db.Uuid
  name      String
  role      String?
  email     String?
  phone     String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
}

model Case {
  id                 String      @id @default(uuid()) @db.Uuid
  organizationId     String      @db.Uuid
  clientId           String      @db.Uuid
  responsibleLawyerId String?    @db.Uuid
  expedienteNumber   String
  processType        ProcessType
  court              String?
  jurisdiction       String?
  status             CaseStatus  @default(ACTIVO)
  title              String
  description        String?
  startDate          DateTime    @default(now())
  endDate            DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  client       Client       @relation(fields: [clientId], references: [id], onDelete: Restrict)
  responsibleLawyer User?   @relation("ResponsibleCases", fields: [responsibleLawyerId], references: [id])
  deadlines    Deadline[]
  documents    Document[]
  hearings     Hearing[]
  parties      CaseParty[]
  assignments  CaseAssignment[]
  actions      CaseAction[]
  notes        CaseNote[]
  tasks        CaseTask[]
  timeEntries  TimeEntry[]
  expenses     Expense[]

  // Billing
  billingMode        BillingMode?
  hourlyRate         Decimal?   @db.Decimal(12, 2)
  fixedFee           Decimal?   @db.Decimal(12, 2)
  contingencyPercent Decimal?   @db.Decimal(5, 2)
  currency           String?    @default("USD")

  @@unique([organizationId, expedienteNumber])
}

model Deadline {
  id            String   @id @default(uuid()) @db.Uuid
  caseId        String   @db.Uuid
  title         String
  dueAt         DateTime
  type          String?  // recurso, escrito, otro
  priority      Int?     // 1-4
  remindDays    Int?     // días antes
  completed     Boolean  @default(false)
  completedAt   DateTime?
  completedById String?  @db.Uuid
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  case       Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  completedBy User? @relation("DeadlineCompletedBy", fields: [completedById], references: [id])
}

model Document {
  id               String   @id @default(uuid()) @db.Uuid
  caseId           String   @db.Uuid
  name             String
  folder           String?
  access           String   @default("private") // private/cliente/equipo
  tags             String[]
  currentVersionId String?  @unique @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  case            Case               @relation(fields: [caseId], references: [id], onDelete: Cascade)
  currentVersion  DocumentVersion?   @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  versions        DocumentVersion[]
  actions         CaseAction[]
}

model DocumentVersion {
  id          String   @id @default(uuid()) @db.Uuid
  documentId  String   @db.Uuid
  storageKey  String   // ruta en Supabase Storage
  checksum    String?
  size        Int?
  mime        String?
  version     Int
  createdById String?  @db.Uuid
  createdAt   DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  currentOf Document? @relation("CurrentVersion")

  @@unique([documentId, version])
}

model Hearing {
  id          String   @id @default(uuid()) @db.Uuid
  caseId      String   @db.Uuid
  date        DateTime
  time        String?   // HH:mm opcional si no usamos solo DateTime
  location    String?
  type        String?
  attendees   Json?
  result      String?
  notes       String?
  createdAt   DateTime @default(now())

  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
}

model CaseParty {
  id                 String   @id @default(uuid()) @db.Uuid
  caseId             String   @db.Uuid
  type               String   // demandante/demandado/tercero
  name               String
  identification     String?
  opposingLawyer     Json?
  createdAt          DateTime @default(now())

  case               Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
}

model CaseAssignment {
  id           String   @id @default(uuid()) @db.Uuid
  caseId       String   @db.Uuid
  userId       String   @db.Uuid
  role         String   // responsable/coautor/paralegal
  since        DateTime @default(now())
  until        DateTime?

  case         Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([userId])
}


model CaseAction {
  id          String   @id @default(uuid()) @db.Uuid
  caseId      String   @db.Uuid
  date        DateTime
  type        String   // escrito/auto/sentencia/notificación/etc
  summary     String
  documentId  String?  @db.Uuid
  createdAt   DateTime @default(now())

  case     Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)

  @@index([caseId])
  @@index([date])
}

model CaseNote {
  id          String   @id @default(uuid()) @db.Uuid
  caseId      String   @db.Uuid
  content     String
  createdById String?  @db.Uuid
  createdAt   DateTime @default(now())

  case       Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  createdBy  User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([caseId])
  @@index([createdAt])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model CaseTask {
  id          String     @id @default(uuid()) @db.Uuid
  caseId      String     @db.Uuid
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Int?       // 1-4
  dueAt       DateTime?
  assigneeId  String?    @db.Uuid
  order       Int?       // para ordenar dentro de la columna
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  case     Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assignee User? @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  attachments TaskAttachment[]

  @@index([caseId])
  @@index([status])
  @@index([assigneeId])
}

model TaskAttachment {
  id         String   @id @default(uuid()) @db.Uuid
  taskId     String   @db.Uuid
  name       String
  storageKey String
  size       Int?
  mime       String?
  createdById String? @db.Uuid
  createdAt  DateTime @default(now())

  task CaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model Suggestion {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  email       String
  content     String
  votesCount  Int      @default(0)
  status      String   @default("OPEN")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  votes SuggestionVote[]

  @@index([createdAt])
  @@index([votesCount])
}

model SuggestionVote {
  id           String   @id @default(uuid()) @db.Uuid
  suggestionId String   @db.Uuid
  email        String?
  ip           String?
  createdAt    DateTime @default(now())

  suggestion Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@unique([suggestionId, email])
  @@index([suggestionId])
}

model TimeEntry {
  id          String   @id @default(uuid()) @db.Uuid
  caseId      String   @db.Uuid
  userId      String?  @db.Uuid
  date        DateTime
  minutes     Int
  description String?
  billable    Boolean  @default(true)
  hourlyRate  Decimal? @db.Decimal(12, 2)
  createdAt   DateTime @default(now())

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([caseId])
  @@index([userId])
  @@index([date])
}

model Expense {
  id          String   @id @default(uuid()) @db.Uuid
  caseId      String   @db.Uuid
  userId      String?  @db.Uuid
  date        DateTime
  concept     String
  amount      Decimal  @db.Decimal(12, 2)
  currency    String   @default("COP")
  notes       String?
  receiptKey  String?
  createdAt   DateTime @default(now())

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([caseId])
  @@index([userId])
  @@index([date])
}


