generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ProcessType {
  CIVIL
  PENAL
  LABORAL
  ADMINISTRATIVO
  OTRO
}

enum CaseStatus {
  ACTIVO
  APELACION
  ARCHIVADO
  FINALIZADO
}

model Organization {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  timezone  String?  @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users   User[]
  clients Client[]
  cases   Case[]
}

model User {
  id              String   @id @default(uuid()) @db.Uuid
  organizationId  String   @db.Uuid
  email           String
  name            String
  hashedPassword  String?
  role            String? // admin, abogado, asistente
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedCases Case[]     @relation("ResponsibleCases")
  deadlinesCompleted Deadline[] @relation("DeadlineCompletedBy")

  @@unique([organizationId, email])
}

model Client {
  id              String   @id @default(uuid()) @db.Uuid
  organizationId  String   @db.Uuid
  name            String
  type            String   // persona/empresa
  identification  String?
  contact         Json?
  status          String?  // activo/inactivo
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  cases        Case[]
}

model Case {
  id                 String      @id @default(uuid()) @db.Uuid
  organizationId     String      @db.Uuid
  clientId           String      @db.Uuid
  responsibleLawyerId String?    @db.Uuid
  expedienteNumber   String
  processType        ProcessType
  court              String?
  jurisdiction       String?
  status             CaseStatus  @default(ACTIVO)
  title              String
  description        String?
  startDate          DateTime    @default(now())
  endDate            DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  client       Client       @relation(fields: [clientId], references: [id], onDelete: Restrict)
  responsibleLawyer User?   @relation("ResponsibleCases", fields: [responsibleLawyerId], references: [id])
  deadlines    Deadline[]

  @@unique([organizationId, expedienteNumber])
}

model Deadline {
  id            String   @id @default(uuid()) @db.Uuid
  caseId        String   @db.Uuid
  title         String
  dueAt         DateTime
  type          String?  // recurso, escrito, otro
  priority      Int?     // 1-4
  remindDays    Int?     // d√≠as antes
  completed     Boolean  @default(false)
  completedAt   DateTime?
  completedById String?  @db.Uuid
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  case       Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  completedBy User? @relation("DeadlineCompletedBy", fields: [completedById], references: [id])
}


