import { PrismaService } from '../prisma/prisma.service';
export declare class ClientsService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    list(orgId: string, query?: {
        q?: string;
        type?: string;
        status?: string;
        page?: number;
        pageSize?: number;
        sort?: string;
        dir?: 'asc' | 'desc';
    }): Promise<{
        total: number;
        page: number;
        pageSize: number;
        data: {
            name: string;
            organizationId: string;
            type: string;
            id: string;
            status: string | null;
            createdAt: Date;
            updatedAt: Date;
            email: string | null;
            responsibleLawyerId: string | null;
            tags: string[];
            phones: string[];
            identification: string | null;
            addressLine: string | null;
            city: string | null;
            state: string | null;
            country: string | null;
            postalCode: string | null;
            contact: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
    }>;
    get(orgId: string, id: string): import("@prisma/client").Prisma.Prisma__ClientClient<{
        name: string;
        organizationId: string;
        type: string;
        id: string;
        status: string | null;
        createdAt: Date;
        updatedAt: Date;
        email: string | null;
        responsibleLawyerId: string | null;
        tags: string[];
        phones: string[];
        identification: string | null;
        addressLine: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        contact: import("@prisma/client/runtime/library").JsonValue | null;
    } | null, null, import("@prisma/client/runtime/library").DefaultArgs, import("@prisma/client").Prisma.PrismaClientOptions>;
    create(orgId: string, data: {
        name: string;
        type: string;
        identification?: string;
        email?: string;
        phones?: string[];
        addressLine?: string;
        city?: string;
        state?: string;
        country?: string;
        postalCode?: string;
        contact?: any;
        responsibleLawyerId?: string;
        tags?: string[];
    }): import("@prisma/client").Prisma.Prisma__ClientClient<{
        name: string;
        organizationId: string;
        type: string;
        id: string;
        status: string | null;
        createdAt: Date;
        updatedAt: Date;
        email: string | null;
        responsibleLawyerId: string | null;
        tags: string[];
        phones: string[];
        identification: string | null;
        addressLine: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        contact: import("@prisma/client/runtime/library").JsonValue | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, import("@prisma/client").Prisma.PrismaClientOptions>;
    update(orgId: string, id: string, data: Partial<{
        name: string;
        type: string;
        identification?: string;
        email?: string;
        phones?: string[];
        addressLine?: string;
        city?: string;
        state?: string;
        country?: string;
        postalCode?: string;
        contact?: any;
        status?: string;
        responsibleLawyerId?: string;
        tags?: string[];
    }>): Promise<{
        name: string;
        organizationId: string;
        type: string;
        id: string;
        status: string | null;
        createdAt: Date;
        updatedAt: Date;
        email: string | null;
        responsibleLawyerId: string | null;
        tags: string[];
        phones: string[];
        identification: string | null;
        addressLine: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        contact: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    remove(orgId: string, id: string): Promise<{
        ok: boolean;
    }>;
}
